// server.js
const express = require('express');
const mongoose = require('mongoose');
const shortid = require('shortid');

const app = express();

// Connect to MongoDB
mongoose.connect('mongodb://mongo:27017/tiny-url', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => console.log('Connected to MongoDB'));

// Define URL schema
const urlSchema = new mongoose.Schema({
  originalUrl: String,
  shortUrl: String,
});

const Url = mongoose.model('Url', urlSchema);

// Middleware to parse JSON
app.use(express.json());

// Endpoint to shorten URL
app.post('/api/shorten', async (req, res) => {
  const { originalUrl } = req.body;
  if (!originalUrl) {
    return res.status(400).json({ error: 'Original URL is required' });
  }

  try {
    let url = await Url.findOne({ originalUrl });
    if (url) {
      res.json(url);
    } else {
      const shortCode = shortid.generate();
      const shortUrl = `http://short_url/${shortCode}`;
      const newUrl = new Url({
        originalUrl,
        shortUrl,
      });
      await newUrl.save();
      res.json(newUrl);
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
